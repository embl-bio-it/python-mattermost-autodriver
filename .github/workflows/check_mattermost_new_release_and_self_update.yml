name: Check new Mattermost releases and self update preparing for package release

on:
  schedule:
    - cron: '0 8 * * 1' # Runs weekly on Monday at 08:00
  workflow_dispatch:    # Allows manual trigger

jobs:
  check-and-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure all tags are available

      - name: Set up initial dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Check for latest Mattermost Server tag and MMAutoDriver PyPI version
        id: version_check
        run: |
          if ! TAGS_JSON="$(curl -s -f https://api.github.com/repos/mattermost/mattermost/tags)"; then
            echo "GitHub API call failed"
            exit 1
          fi

          LATEST_TAG="$(echo "$TAGS_JSON" | jq -r '.[].name' | grep '^v' | grep -v -- '-rc' | sort -V | tail -n 1)"
          if [ -z "$LATEST_TAG" ]; then
            echo "No tags found"
            exit 1
          fi

          echo "Latest Mattermost Server tag: $LATEST_TAG"

          MM_VERSION="${LATEST_TAG#v}"

          OUR_TAG="$(git tag | sort -V | tail -n 1)"
          if [ -z "$OUR_TAG" ]; then
            echo "No tags found"
            exit 1
          fi

          echo "Latest MattermostAutoDriver git tag: $OUR_TAG"

          if [ "$OUR_TAG" = "$MM_VERSION" ]; then
            echo "MattermostAutoDriver and Mattermost Server versions match! We are up-to-date"
            exit 0
          fi

          if ! PYPI_VERSIONS="$(curl -s -f https://pypi.org/pypi/mattermostautodriver/json)"; then
            echo "Failed to retrieve versions from PyPI"
            exit 1
          fi

          if echo "$PYPI_VERSIONS" | jq -e --arg ver "$MM_VERSION" '.releases[$ver]' > /dev/null; then
            echo "Version $MM_VERSION already on PyPI - Unexpected! Not tagged but released?"
            exit 1
          fi

          echo "version=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "tag=$MM_VERSION" >> $GITHUB_OUTPUT

      - name: Set up additional dependencies for the entire check
        if: steps.version_check.outputs.version != ''
        run: |
          sudo apt-get update
          sudo apt-get install -y make npm python3 python3-pip git

      - name: Clone Mattermost server files matching tagged version
        if: steps.version_check.outputs.version != ''
        run: |
          git clone --depth 1 --branch "${{ steps.version_check.outputs.version }}" https://github.com/mattermost/mattermost mattermost

      - name: Build OpenAPI JSON specification
        if: steps.version_check.outputs.version != ''
        run: |
          cd mattermost/api
          make build
          ./node_modules/.bin/swagger-cli bundle --outfile openapi.json v4/html/static/mattermost-openapi-v4.yaml

      - name: Generate endpoints from API specification
        if: steps.version_check.outputs.version != ''
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          ./scripts/generate_endpoints.sh

      - name: "Update our version file: src/mattermostautodriver/version.py"
        if: steps.version_check.outputs.version != ''
        run: |
          sed -i 's/full_version =.*/full_version = "${{ steps.version_check.outputs.tag }}"/' src/mattermostautodriver/version.py

      - name: Commit endpoint changes and tag new version
        if: steps.version_check.outputs.version != ''
        run: |
          git config user.name "Github-Actions"
          git config user.email "github-actions@github.com"
          git add .
          if ! git commit -m "Prepare release ${{ steps.version_check.outputs.version }}"; then
            echo "No changes done, we are likely up-to-date so nothing to release. Stopping gracefuly"
          fi
          # Tag even if there were no changes so we avoid re-running this in the future
          git tag "${{ steps.version_check.outputs.tag }}"

      - name: Push changes and tag to mattermostautodriver repo
        if: steps.version_check.outputs.version != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push origin HEAD
          git push origin "${{ steps.version_check.outputs.tag }}"

